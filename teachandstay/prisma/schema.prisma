// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utente {
  id                  Int              @id @default(autoincrement()) // IDUtente
  nome                String
  cognome             String
  dataIscrizione      DateTime         @default(now())
  email               String           @unique
  password            String
  tipologiaAbbonamento String
  tipologiaUtente     String

  // Relazioni con le prenotazioni
  prenotazioniAsHost     Prenotazione[] @relation("HostPrenotazioni")
  prenotazioniAsTeacher  Prenotazione[] @relation("TeacherPrenotazioni")
  
  // Relazioni con le conversazioni
  conversazioniOwner     Conversazione[] @relation("OwnerConversazioni")
  conversazioniPartner   Conversazione[] @relation("PartnerConversazioni")
  
  // Relazioni con i messaggi
  messaggi               Messaggio[]
}

model Prenotazione {
  idPrenotazione      Int      @id @default(autoincrement())
  dataInizio          DateTime
  dataFine            DateTime
  linguaInsegnamento  String
  nazione             String
  citta               String
  indirizzo           String
  numeroOspiti        Int
  numeroAnimali       Int
  animali             String    // Pu√≤ essere una descrizione o una lista in formato stringa
  rimborso            Boolean
  vittoAlloggio       Boolean
  statoPrenotazione   String

  // Relazioni: host e teacher, entrambi sono utenti
  hostId              Int
  host                Utente   @relation("HostPrenotazioni", fields: [hostId], references: [id])
  
  teacherId           Int
  teacher             Utente   @relation("TeacherPrenotazioni", fields: [teacherId], references: [id])
}

model Conversazione {
  idConversazione   Int      @id @default(autoincrement())
  
  // Relazioni con gli utenti
  ownerId           Int
  conversationOwner Utente   @relation("OwnerConversazioni", fields: [ownerId], references: [id])
  
  partnerId         Int
  conversationPartner Utente @relation("PartnerConversazioni", fields: [partnerId], references: [id])
  
  // Relazione con i messaggi
  messaggi          Messaggio[]
}

model Messaggio {
  idMessaggio      Int      @id @default(autoincrement())
  conversazioneId  Int
  conversazione    Conversazione @relation(fields: [conversazioneId], references: [idConversazione])
  
  utenteId         Int
  utente           Utente   @relation(fields: [utenteId], references: [id])
  
  messaggio        String
  dataInvio        DateTime @default(now())
}